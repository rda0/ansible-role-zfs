- name: configure zfs module options
  template:
    src: modprobe.j2
    dest: /etc/modprobe.d/zfs.conf
    owner: root
    group: root
    mode: "0644"
  when: zfs_module_config_arc_max_gb != 0 or zfs_module_config_scan_mem_lim_fact != 20
  register: _zfs_task_configure_zfs_module_options

- name: cleanup zfs module options
  file:
    path: /etc/modprobe.d/zfs.conf
    state: absent
  when: zfs_module_config_arc_max_gb == 0 and zfs_module_config_scan_mem_lim_fact == 20
  register: _zfs_task_cleanup_zfs_module_options

- name: modprobe zfs
  community.general.modprobe:
    name: zfs
    state: present

- name: apply zfs module options at runtime
  shell: '{{ item }}'
  loop:
    - 'echo "{{ _zfs_module_config_arc_max }}" > /sys/module/zfs/parameters/zfs_arc_max'
    - 'echo "{{ zfs_module_config_scan_mem_lim_fact }}" > /sys/module/zfs/parameters/zfs_scan_mem_lim_fact'
  when: _zfs_task_configure_zfs_module_options.changed or _zfs_task_cleanup_zfs_module_options.changed

- name: set fact _zfs_pools
  set_fact:
    _zfs_pools: "{{ _zfs_pools + [_zfs_pool] }}"
  vars:
    _zfs_pool:
      name: '{{ item.name | default(zfs_pool_prefix + ansible_loop.index0 | string) }}'
      ashift: '{{ item.ashift | default(zfs_pool_ashift) }}'
      pool_props: '{{ item.pool_props | default(zfs_pool_props) }}'
      fs_props: '{{ item.fs_props | default(zfs_fs_props) }}'
      mount: "{{ item.mount | default('none') }}"
      config: '{{ item.config }}'
      import: '{{ zfs_pool_import_command }} {{ item.name | default(zfs_pool_prefix + ansible_loop.index0 | string) }}'
  loop: '{{ zfs_pools }}'
  loop_control:
    extended: yes
    label: "{{ item.name | default(zfs_pool_prefix + ansible_loop.index0 | string) }}"

- name: debug _zfs_pools
  debug:
    msg: "{{ _zfs_pools }}"

- name: import pools
  shell: '{{ item.import }}'
  args:
    creates: '/proc/spl/kstat/zfs/{{ item.name }}/state'
  ignore_errors: True  # noqa ignore-errors
  when: zfs_pool_import
  loop: '{{ _zfs_pools }}'
  #register: zfs_pool_import_register

#- name: debug zfs_pool_import_register
#  debug:
#    msg: "{{ zfs_pool_import_register }}"

- name: create pools
  command: 'zpool create -o ashift={{ item.ashift }}{% for k, v in item.pool_props.items() %} -o {{ k }}={{ v }}{% endfor %}{% for k, v in item.fs_props.items() %} -O {{ k }}={{ v }}{% endfor %} -m {{ item.mount }} {{ item.name }} {{ item.config }}'
  args:
    creates: '/proc/spl/kstat/zfs/{{ item.name }}/state'
  #when: zfs_pool_import_register.results[ansible_loop.index0].changed | default(False) == False
  loop: '{{ _zfs_pools }}'

- name: set fact _zfs_datasets
  set_fact:
    _zfs_datasets: "{{ _zfs_datasets + [_zfs_dataset] }}"
  vars:
    _zfs_dataset:
      name: '{{ item.name }}'
      pool: '{{ item.pool | default(zfs_pool_prefix + 0 | string) }}'
      fs_props: "{{ (item.fs_props | default(zfs_fs_props)) | combine({'mountpoint': item.mount | default('none')}) }}"
  loop: '{{ zfs_datasets }}'
  loop_control:
    extended: yes
    label: "{{ item.name }}"

- name: debug _zfs_datasets
  debug:
    msg: "{{ _zfs_datasets }}"

- name: create datasets
  community.general.zfs:
    name: '{{ item.pool }}/{{ item.name }}'
    state: present
    extra_zfs_properties: '{{ item.fs_props }}'
  loop: '{{ _zfs_datasets }}'
  ignore_errors: '{{ ansible_check_mode }}'
  changed_when: zfs_datasets_changed_when  # workaround variable for ansible bug in check mode

- name: set fact _zfs_blockdevices
  set_fact:
    _zfs_blockdevices: "{{ _zfs_blockdevices + [_zfs_blockdevice] }}"
  vars:
    _zfs_blockdevice:
      name: '{{ item.name }}'
      pool: '{{ item.pool | default(zfs_pool_prefix + 0 | string) }}'
      size: '{{ item.size }}'
      zfs_options: '{{ item.zfs_options | default({}) | combine({"volsize": item.size}) }}'
      filesystem: '{{ item.filesystem | default("none") }}'
      fs_options: '{{ item.fs_options | default([]) }}'
  loop: '{{ zfs_blockdevices }}'
  loop_control:
    extended: yes
    label: "{{ item.name }}"

- name: debug _zfs_blockdevices
  debug:
    msg: "{{ _zfs_blockdevices }}"

- name: create blockdevices
  include_tasks: create_blockdevice.yml
  loop: "{{ _zfs_blockdevices }}"
